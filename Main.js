// Generated by Haxe 4.0.0-rc.2+77068e1
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var BB = function() { };
BB.__name__ = true;
BB.SquareDistance = function(s1,s2) {
	return BB.squareDistance[s1][s2];
};
BB.FileDistance = function(s1,s2) {
	return util_MathUtil.abs(Types.File_Of(s1) - Types.File_Of(s2));
};
BB.RankDistance = function(s1,s2) {
	return util_MathUtil.abs(Types.Rank_Of(s1) - Types.Rank_Of(s2));
};
BB.Init = function() {
	haxe_Log.trace("Init::BB",{ fileName : "BB.hx", lineNumber : 55, className : "BB", methodName : "Init"});
	if(BB.initialized) {
		return;
	}
	BB.filesBB = [];
	BB.ranksBB = [];
	var _g = 0;
	while(_g < 9) {
		var i = _g++;
		BB.filesBB.push(new Bitboard(511,0,0));
		BB.filesBB[i].ShiftL(9 * i);
		BB.ranksBB.push(new Bitboard(262657,262657,262657));
		BB.ranksBB[i].ShiftL(i);
	}
	BB.enemyField1[1] = BB.ranksBB[8].newCOPY();
	BB.enemyField1[0] = BB.ranksBB[0].newCOPY();
	BB.enemyField2[1] = BB.ranksBB[8].newOR(BB.ranksBB[7]);
	BB.enemyField2[0] = BB.ranksBB[0].newOR(BB.ranksBB[1]);
	BB.enemyField3[1] = BB.enemyField2[1].newOR(BB.ranksBB[6]);
	BB.enemyField3[0] = BB.enemyField2[0].newOR(BB.ranksBB[2]);
	BB.pawnLineBB[0] = new Bitboard();
	BB.pawnLineBB[1] = new Bitboard();
	var _g1 = 0;
	while(_g1 < 81) {
		var sq = _g1++;
		BB.squareBB[sq] = new Bitboard();
		BB.squareBB[sq].SetBit(sq);
	}
	var _g2 = 0;
	while(_g2 < 81) {
		var s1 = _g2++;
		BB.squareDistance[s1] = [];
		var _g21 = 0;
		while(_g21 < 81) {
			var s2 = _g21++;
			BB.squareDistance[s1][s2] = util_MathUtil.max(BB.FileDistance(s1,s2),BB.RankDistance(s1,s2));
		}
	}
	var this1 = 0;
	var pt = this1;
	var _g3 = 0;
	var _g4 = 31;
	while(_g3 < _g4) {
		var p = _g3++;
		var this2 = p;
		pt = this2;
		BB.stepAttacksBB[pt] = [];
		var _g31 = 0;
		while(_g31 < 81) {
			var s11 = _g31++;
			BB.stepAttacksBB[pt][s11] = new Bitboard();
		}
	}
	var s = 0;
	var _g5 = 0;
	var _g6 = 15;
	while(_g5 < _g6) {
		var pt1 = _g5++;
		BB.pseudoAttacks[pt1] = [];
	}
	var _g7 = 0;
	while(_g7 < 81) {
		var s3 = _g7++;
		var a = BB.AttacksBB(s3,new Bitboard(),5);
		BB.pseudoAttacks[5][s3] = BB.AttacksBB(s3,new Bitboard(),5);
		BB.pseudoAttacks[6][s3] = BB.AttacksBB(s3,new Bitboard(),6);
		BB.pseudoAttacks[13][s3] = BB.AttacksBB(s3,new Bitboard(),13);
		BB.pseudoAttacks[14][s3] = BB.AttacksBB(s3,new Bitboard(),14);
		BB.pseudoQueenAttacks[s3] = new Bitboard();
		BB.pseudoQueenAttacks[s3].OR(BB.pseudoAttacks[5][s3]);
		BB.pseudoQueenAttacks[s3].OR(BB.pseudoAttacks[6][s3]);
	}
	var _g8 = 0;
	while(_g8 < 81) {
		var s12 = _g8++;
		BB.betweenBB[s12] = [];
		BB.lineBB[s12] = [];
		var _g81 = 0;
		while(_g81 < 81) {
			var s21 = _g81++;
			BB.betweenBB[s12][s21] = new Bitboard();
			BB.lineBB[s12][s21] = new Bitboard();
			if(BB.pseudoQueenAttacks[s12].newAND(BB.squareBB[s21]).IsNonZero()) {
				var deltta = (s21 - s12) / BB.SquareDistance(s12,s21) | 0;
				s = s12 + deltta;
				while(s != s21) {
					BB.betweenBB[s12][s21].OR(BB.squareBB[s]);
					s += deltta;
				}
				pt = 6;
				if(BB.pseudoAttacks[5][s12].newAND(BB.squareBB[s21]).IsNonZero()) {
					pt = 5;
				}
				BB.lineBB[s12][s21].Copy(BB.pseudoAttacks[pt][s12]);
				BB.lineBB[s12][s21].AND(BB.pseudoAttacks[pt][s21]);
				BB.lineBB[s12][s21].OR(BB.squareBB[s12]);
				BB.lineBB[s12][s21].OR(BB.squareBB[s21]);
			}
		}
	}
	var c = 0;
	var _g9 = 1;
	var _g10 = 14;
	while(_g9 < _g10) {
		var p1 = _g9++;
		var this3 = p1;
		pt = this3;
		var _g91 = 0;
		while(_g91 < 81) {
			var s4 = _g91++;
			var _g92 = 0;
			while(_g92 < 9) {
				var k = _g92++;
				if(BB.steps[pt][k] == 0) {
					continue;
				}
				var to = s4;
				if(c == 0) {
					to += BB.steps[pt][k];
				} else {
					to -= BB.steps[pt][k];
				}
				if(Types.Is_SqOK(to) == false) {
					continue;
				}
				var tmp;
				if(BB.SquareDistance(s4,to) >= 3) {
					var this4 = Types.RawTypeOf(pt);
					tmp = this4 != 2;
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				BB.stepAttacksBB[Types.Make_Piece(c,pt)][s4].OR(BB.squareBB[to]);
			}
		}
	}
	var c1 = 1;
	var _g11 = 1;
	var _g12 = 14;
	while(_g11 < _g12) {
		var p2 = _g11++;
		var this5 = p2;
		pt = this5;
		var _g111 = 0;
		while(_g111 < 81) {
			var s5 = _g111++;
			var _g112 = 0;
			while(_g112 < 9) {
				var k1 = _g112++;
				if(BB.steps[pt][k1] == 0) {
					continue;
				}
				var to1 = s5;
				if(c1 == 0) {
					to1 += BB.steps[pt][k1];
				} else {
					to1 -= BB.steps[pt][k1];
				}
				if(Types.Is_SqOK(to1) == false) {
					continue;
				}
				var tmp1;
				if(BB.SquareDistance(s5,to1) >= 3) {
					var this6 = Types.RawTypeOf(pt);
					tmp1 = this6 != 2;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					continue;
				}
				BB.stepAttacksBB[Types.Make_Piece(c1,pt)][s5].OR(BB.squareBB[to1]);
			}
		}
	}
	BB.initialized = true;
};
BB.getStepAttacksBB = function(pc,sq) {
	return BB.stepAttacksBB[pc][sq];
};
BB.AttacksBB = function(sq,occ,pt) {
	switch(pt) {
	case 2:
		return BB.SlidingAttack(BB.rDeltas,sq,occ);
	case 5:
		return BB.SlidingAttack(BB.bDeltas,sq,occ);
	case 6:
		return BB.SlidingAttack(BB.rDeltas,sq,occ);
	case 13:
		return BB.SlidingGoldenAttack(BB.bDeltas,sq,occ);
	case 14:
		return BB.SlidingGoldenAttack(BB.rDeltas,sq,occ);
	default:
		return new Bitboard();
	}
};
BB.SlidingAttack = function(deltas,sq,occ) {
	var attack = new Bitboard();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		if(deltas[i] == 0) {
			return attack;
		}
		var s = sq + deltas[i];
		while(Types.Is_SqOK(s) && BB.SquareDistance(s,s - deltas[i]) == 1) {
			attack.OR(BB.squareBB[s]);
			if(occ.newAND(BB.squareBB[s]).IsNonZero()) {
				break;
			}
			s += deltas[i];
		}
	}
	return attack;
};
BB.SlidingGoldenAttack = function(deltas,sq,occ) {
	var attack = BB.stepAttacksBB[8][sq].newCOPY();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		if(deltas[i] == 0) {
			return attack;
		}
		var s = sq + deltas[i];
		while(Types.Is_SqOK(s) && BB.SquareDistance(s,s - deltas[i]) == 1) {
			attack.OR(BB.squareBB[s]);
			if(occ.newAND(BB.squareBB[s]).IsNonZero()) {
				break;
			}
			s += deltas[i];
		}
	}
	return attack;
};
BB.ShiftBB = function(b,deltta) {
	if(deltta == -1) {
		return b.newShiftR(1);
	}
	if(deltta == 1) {
		return b.newShiftL(1);
	}
	if(deltta == -10) {
		return b.newAND(BB.filesBB[8].newNOT()).newShiftL(10);
	}
	if(deltta == -8) {
		return b.newAND(BB.filesBB[8].newNOT()).newShiftR(8);
	}
	if(deltta == 8) {
		return b.newAND(BB.filesBB[0].newNOT()).newShiftL(8);
	}
	if(deltta == 10) {
		return b.newAND(BB.filesBB[0].newNOT()).newShiftR(10);
	}
	var zero = new Bitboard();
	return zero;
};
var Bitboard = function(l,m,u) {
	if(u == null) {
		u = 0;
	}
	if(m == null) {
		m = 0;
	}
	if(l == null) {
		l = 0;
	}
	this.needCount = false;
	this.count = 0;
	this.upper = 0;
	this.middle = 0;
	this.lower = 0;
	this.lower = l;
	this.middle = m;
	this.upper = u;
};
Bitboard.__name__ = true;
Bitboard.LeastSB = function(theInt) {
	var i = -1;
	if((theInt & 65535) == 0) {
		i += 16;
		theInt >>>= 16;
	}
	if((theInt & 255) == 0) {
		i += 8;
		theInt >>>= 8;
	}
	if((theInt & 15) == 0) {
		i += 4;
		theInt >>>= 4;
	}
	if((theInt & 3) == 0) {
		i += 2;
		theInt >>>= 2;
	}
	if((theInt & 1) == 0) {
		++i;
		theInt >>>= 1;
	}
	if((theInt & 1) != 0) {
		++i;
	}
	return i;
};
Bitboard.prototype = {
	Clear: function() {
		this.lower = 0;
		this.middle = 0;
		this.upper = 0;
		this.count = 0;
		this.needCount = false;
	}
	,Copy: function(other) {
		this.lower = other.lower;
		this.middle = other.middle;
		this.upper = other.upper;
		this.count = other.count;
		this.needCount = other.needCount;
	}
	,newCOPY: function() {
		var newBB = new Bitboard();
		newBB.Copy(this);
		return newBB;
	}
	,IsZero: function() {
		if(this.lower == 0 && this.middle == 0) {
			return this.upper == 0;
		} else {
			return false;
		}
	}
	,IsNonZero: function() {
		if(!(this.lower != 0 || this.middle != 0)) {
			return this.upper != 0;
		} else {
			return true;
		}
	}
	,isSet: function(sq) {
		if(sq < 27) {
			return (this.lower & 1 << sq) != 0;
		} else if(sq < 54) {
			return (this.middle & 1 << sq - 27) != 0;
		} else {
			return (this.upper & 1 << sq - 54) != 0;
		}
	}
	,LSB: function() {
		if(this.lower != 0) {
			return Bitboard.LeastSB(this.lower);
		}
		if(this.middle != 0) {
			return Bitboard.LeastSB(this.middle) + 27;
		}
		if(this.upper != 0) {
			return Bitboard.LeastSB(this.upper) + 54;
		}
		return -1;
	}
	,OR: function(other) {
		this.lower |= other.lower;
		this.middle |= other.middle;
		this.upper |= other.upper;
		this.needCount = true;
	}
	,newOR: function(other) {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.OR(other);
		return newBB;
	}
	,XOR: function(other) {
		this.lower ^= other.lower;
		this.middle ^= other.middle;
		this.upper ^= other.upper;
		this.needCount = true;
	}
	,newXOR: function(other) {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.XOR(other);
		return newBB;
	}
	,PopLSB: function() {
		var index = -1;
		if(this.lower != 0) {
			this.count--;
			index = Bitboard.LeastSB(this.lower);
			this.lower &= this.lower - 1;
			return index;
		}
		if(this.middle != 0) {
			this.count--;
			index = 27 + Bitboard.LeastSB(this.middle);
			this.middle &= this.middle - 1;
			return index;
		}
		if(this.upper != 0) {
			this.count--;
			index = 54 + Bitboard.LeastSB(this.upper);
			this.upper &= this.upper - 1;
			return index;
		}
		return -1;
	}
	,ShiftL: function(theShift) {
		if(theShift < 27) {
			this.upper <<= theShift;
			this.upper |= this.middle >>> 27 - theShift;
			this.middle <<= theShift;
			this.middle |= this.lower >>> 27 - theShift;
			this.lower <<= theShift;
		} else if(theShift < 54) {
			this.upper = this.middle >>> theShift - 27;
			this.upper |= this.lower >>> 54 - theShift;
			this.middle = this.lower << theShift - 27;
			this.lower = 0;
		} else {
			this.upper = this.lower << theShift - 54;
			this.lower = 0;
		}
		this.needCount = true;
	}
	,newShiftL: function(theShift) {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.ShiftL(theShift);
		return newBB;
	}
	,ShiftR: function(theShift) {
		if(theShift < 27) {
			this.lower >>>= theShift;
			this.lower |= this.middle << 27 - theShift >>> 27 - theShift << 27 - theShift;
			this.middle >>>= theShift;
			this.middle |= this.upper << 27 - theShift >>> 27 - theShift << 27 - theShift;
			this.upper >>>= theShift;
		} else if(theShift < 54) {
			this.lower = this.middle >>> theShift - 27;
			this.lower |= this.upper << 27 - theShift >>> 27 - theShift << 27 - theShift;
			this.middle = this.upper >>> theShift - 27;
			this.upper = 0;
		} else {
			this.lower = this.upper >>> theShift - 54;
			this.middle = 0;
			this.upper = 0;
		}
		this.needCount = true;
	}
	,newShiftR: function(theShift) {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.ShiftR(theShift);
		return newBB;
	}
	,SetBit: function(theIndex) {
		if(theIndex < 27) {
			this.lower |= 1 << theIndex;
		} else if(theIndex < 54) {
			this.middle |= 1 << theIndex - 27;
		} else {
			this.upper |= 1 << theIndex - 54;
		}
		this.needCount = true;
	}
	,ClrBit: function(theIndex) {
		if(theIndex < 27) {
			this.lower ^= 1 << theIndex;
		} else if(theIndex < 54) {
			this.middle ^= 1 << theIndex - 27;
		} else {
			this.upper ^= 1 << theIndex - 54;
		}
		this.needCount = true;
	}
	,NORM27: function() {
		this.lower &= 134217727;
		this.middle &= 134217727;
		this.upper &= 134217727;
		this.needCount = true;
		return this;
	}
	,AND: function(other) {
		this.lower &= other.lower;
		this.middle &= other.middle;
		this.upper &= other.upper;
		this.needCount = true;
	}
	,newAND: function(other) {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.AND(other);
		return newBB;
	}
	,NOT: function() {
		this.lower = ~this.lower;
		this.middle = ~this.middle;
		this.upper = ~this.upper;
		this.count = 81 - this.count;
	}
	,newNOT: function() {
		var newBB = new Bitboard();
		newBB.Copy(this);
		newBB.NOT();
		return newBB;
	}
	,toStringBB: function() {
		var s = "";
		var _g = 0;
		while(_g < 81) {
			var i = _g++;
			var f = 8 - i % 9;
			var r = i / 9 | 0;
			var sq = f * 9 + r;
			if(i % 9 == 0) {
				s += "\n";
			}
			if(this.isSet(sq)) {
				s += "1";
			} else {
				s += "0";
			}
		}
		return s;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = $hx_exports["Main"] = function() { };
Main.__name__ = true;
Main.main = function() {
	haxe_Log.trace("Hello haxe",{ fileName : "Main.hx", lineNumber : 11, className : "Main", methodName : "main"});
	var ui1 = new ui_UI();
	Main.gui = ui1;
};
Main.onClickCell = function(sq) {
	Main.gui.onClickCell(sq);
};
Main.onClickHand = function(pr) {
	Main.gui.onClickHand(pr);
};
Main.onClickPromote = function(b) {
	Main.gui.onClickPromote(b == 1);
};
Math.__name__ = true;
var Position = function() {
	this.pieceList = [];
	this.pieceCount = [];
	this.index = [];
	this.byColorBB = [];
	this.byTypeBB = [];
	this.hand = [];
	this.sideToMove = 0;
	this.board = [];
	haxe_Log.trace("Posision::new",{ fileName : "Position.hx", lineNumber : 22, className : "Position", methodName : "new"});
	this.InitBB();
};
Position.__name__ = true;
Position.prototype = {
	InitBB: function() {
		haxe_Log.trace("Posision::InitBB",{ fileName : "Position.hx", lineNumber : 27, className : "Position", methodName : "InitBB"});
		this.byTypeBB = [];
		var _g = 0;
		var _g1 = 31;
		while(_g < _g1) {
			var i = _g++;
			this.byTypeBB.push(new Bitboard());
		}
		this.byColorBB = [];
		this.byColorBB.push(new Bitboard());
		this.pieceCount[0] = [];
		this.pieceList[0] = [];
		this.pieceCount[0][0] = 0;
		this.pieceList[0][0] = [];
		this.pieceCount[0][1] = 0;
		this.pieceList[0][1] = [];
		this.pieceCount[0][2] = 0;
		this.pieceList[0][2] = [];
		this.pieceCount[0][3] = 0;
		this.pieceList[0][3] = [];
		this.pieceCount[0][4] = 0;
		this.pieceList[0][4] = [];
		this.pieceCount[0][5] = 0;
		this.pieceList[0][5] = [];
		this.pieceCount[0][6] = 0;
		this.pieceList[0][6] = [];
		this.pieceCount[0][7] = 0;
		this.pieceList[0][7] = [];
		this.pieceCount[0][8] = 0;
		this.pieceList[0][8] = [];
		this.pieceCount[0][9] = 0;
		this.pieceList[0][9] = [];
		this.pieceCount[0][10] = 0;
		this.pieceList[0][10] = [];
		this.pieceCount[0][11] = 0;
		this.pieceList[0][11] = [];
		this.pieceCount[0][12] = 0;
		this.pieceList[0][12] = [];
		this.pieceCount[0][13] = 0;
		this.pieceList[0][13] = [];
		this.pieceCount[0][14] = 0;
		this.pieceList[0][14] = [];
		this.byColorBB.push(new Bitboard());
		this.pieceCount[1] = [];
		this.pieceList[1] = [];
		this.pieceCount[1][0] = 0;
		this.pieceList[1][0] = [];
		this.pieceCount[1][1] = 0;
		this.pieceList[1][1] = [];
		this.pieceCount[1][2] = 0;
		this.pieceList[1][2] = [];
		this.pieceCount[1][3] = 0;
		this.pieceList[1][3] = [];
		this.pieceCount[1][4] = 0;
		this.pieceList[1][4] = [];
		this.pieceCount[1][5] = 0;
		this.pieceList[1][5] = [];
		this.pieceCount[1][6] = 0;
		this.pieceList[1][6] = [];
		this.pieceCount[1][7] = 0;
		this.pieceList[1][7] = [];
		this.pieceCount[1][8] = 0;
		this.pieceList[1][8] = [];
		this.pieceCount[1][9] = 0;
		this.pieceList[1][9] = [];
		this.pieceCount[1][10] = 0;
		this.pieceList[1][10] = [];
		this.pieceCount[1][11] = 0;
		this.pieceList[1][11] = [];
		this.pieceCount[1][12] = 0;
		this.pieceList[1][12] = [];
		this.pieceCount[1][13] = 0;
		this.pieceList[1][13] = [];
		this.pieceCount[1][14] = 0;
		this.pieceList[1][14] = [];
		this.st = new StateInfo();
	}
	,AttacksFromPawn: function(sq,c) {
		return BB.stepAttacksBB[Types.Make_Piece(c,1)][sq];
	}
	,AttackersToSq: function(sq) {
		return this.AttackersTo(sq,this.byTypeBB[0]);
	}
	,Checkers: function() {
		return this.st.checkersBB;
	}
	,KingSquare: function(c) {
		return this.pieceList[c][8][0];
	}
	,Legal: function(m) {
		if(Types.Is_Drop(m)) {
			return true;
		}
		var us = this.sideToMove;
		var from = Types.Move_FromSq(m);
		if(Types.TypeOf_Piece(this.PieceOn(from)) == 8) {
			if(this.AttackersToSq(Types.Move_ToSq(m)).newAND(this.PiecesColour(Types.OppColour(us))).IsZero()) {
				return true;
			}
			return false;
		}
		return true;
	}
	,PiecesAll: function() {
		return this.byTypeBB[0];
	}
	,PiecesColour: function(c) {
		return this.byColorBB[c];
	}
	,PiecesColourType: function(c,pt) {
		return this.byColorBB[c].newAND(this.byTypeBB[pt]);
	}
	,PieceOn: function(sq) {
		var this1 = this.board[sq];
		return this1;
	}
	,PiecesType: function(pt) {
		return this.byTypeBB[pt];
	}
	,PiecesTypes: function(pt1,pt2) {
		return this.byTypeBB[pt1].newOR(this.byTypeBB[pt2]);
	}
	,changeSideToMove: function() {
		this.sideToMove = (this.sideToMove + 1) % 2;
	}
	,doMove: function(move) {
		this.doMoveFull(move);
	}
	,doMoveFull: function(move) {
		haxe_Log.trace("Position::doMoveFull " + Types.Move_To_String(move),{ fileName : "Position.hx", lineNumber : 111, className : "Position", methodName : "doMoveFull"});
		var from = Types.Move_FromSq(move);
		var to = Types.Move_ToSq(move);
		var us = this.sideToMove;
		var them = Types.OppColour(us);
		var pc = this.MovedPieceAfter(move);
		var pr = Types.RawTypeOf(pc);
		var pt = Types.TypeOf_Piece(pc);
		haxe_Log.trace("to: " + to + " from: " + from + " pc: " + pc,{ fileName : "Position.hx", lineNumber : 119, className : "Position", methodName : "doMoveFull"});
		if(Types.Is_Drop(move)) {
			this.SubHand(us,pr);
			this.PutPiece(to,us,pt);
			this.changeSideToMove();
			return;
		}
		var captured = Types.TypeOf_Piece(this.PieceOn(to));
		var capturedRaw = Types.RawTypeOf(captured);
		haxe_Log.trace("catured: " + captured + " capturedRaw: " + capturedRaw,{ fileName : "Position.hx", lineNumber : 128, className : "Position", methodName : "doMoveFull"});
		if(captured != 0) {
			var capsq = to;
			this.AddHand(us,capturedRaw);
			this.RemovePiece(capsq,them,captured);
		}
		this.RemovePiece(from,us,pt);
		this.MovePiece(from,to,us,pt);
		if(Types.Move_Type(move) == 32768) {
			this.RemovePiece(to,us,pt);
			var this1 = pt + 8;
			this.PutPiece(to,us,this1);
		}
		this.st.capturedType = captured;
		this.changeSideToMove();
	}
	,undoMove: function(move) {
		haxe_Log.trace("Position::undoMove",{ fileName : "Position.hx", lineNumber : 145, className : "Position", methodName : "undoMove"});
		this.changeSideToMove();
		var us = this.sideToMove;
		var them = Types.OppColour(us);
		var to = Types.Move_ToSq(move);
		var pc = this.MovedPieceAfter(move);
		var pr = Types.RawTypeOf(pc);
		var pt = Types.TypeOf_Piece(this.PieceOn(to));
		if(Types.Is_Drop(move)) {
			this.AddHand(us,pr);
			this.RemovePiece(to,us,pt);
		} else {
			var from = Types.Move_FromSq(move);
			var captured = this.st.capturedType;
			var capturedRaw = Types.RawTypeOf(captured);
			if(Types.Move_Type(move) == 32768) {
				var promotion = pt;
				var this1 = pt - 8;
				pt = this1;
				this.RemovePiece(to,us,promotion);
				this.PutPiece(to,us,pt);
			}
			this.MovePiece(to,from,us,pt);
			if(captured != 0) {
				var capsq = to;
				this.SubHand(us,capturedRaw);
				this.PutPiece(capsq,them,captured);
			}
		}
	}
	,PutPiece: function(sq,c,pt) {
		haxe_Log.trace("Position::PutPiece sq:" + sq + " c:" + c + " pt:" + pt,{ fileName : "Position.hx", lineNumber : 176, className : "Position", methodName : "PutPiece"});
		this.board[sq] = Types.Make_Piece(c,pt);
		this.byColorBB[c].SetBit(sq);
		this.byTypeBB[0].SetBit(sq);
		this.byTypeBB[pt].SetBit(sq);
		var tmp = this.pieceCount[c];
		tmp[0]++;
		var tmp1 = this.pieceCount[c];
		this.index[sq] = tmp1[pt]++;
		this.pieceList[c][pt][this.index[sq]] = sq;
		if(pt == 1) {
			BB.pawnLineBB[c].OR(BB.filesBB[Types.File_Of(sq)]);
		}
	}
	,MovePiece: function(from,to,c,pt) {
		haxe_Log.trace("Position::MovePiece from:" + from + " to:" + to + " c:" + c + " pt:" + pt,{ fileName : "Position.hx", lineNumber : 190, className : "Position", methodName : "MovePiece"});
		this.board[to] = Types.Make_Piece(c,pt);
		this.board[from] = 0;
		this.byColorBB[c].SetBit(to);
		this.byTypeBB[0].SetBit(to);
		this.byTypeBB[pt].SetBit(to);
		this.index[to] = this.index[from];
		this.pieceList[c][pt][this.index[to]] = to;
		if(pt == 1) {
			BB.pawnLineBB[c].OR(BB.filesBB[Types.File_Of(to)]);
		}
	}
	,RemovePiece: function(sq,c,pt) {
		haxe_Log.trace("Position::RemovePiece sq:" + sq + " c:" + c + " pt:" + pt,{ fileName : "Position.hx", lineNumber : 204, className : "Position", methodName : "RemovePiece"});
		this.board[sq] = 0;
		this.byColorBB[c].ClrBit(sq);
		this.byTypeBB[0].ClrBit(sq);
		this.byTypeBB[pt].ClrBit(sq);
		var tmp = this.pieceCount[c];
		tmp[0]--;
		var tmp1 = this.pieceCount[c];
		tmp1[pt]--;
		var lastSquare = this.pieceList[c][pt][this.pieceCount[c][pt]];
		this.index[lastSquare] = this.index[sq];
		this.pieceList[c][pt][this.index[lastSquare]] = lastSquare;
		this.pieceList[c][pt][this.pieceCount[c][pt]] = 81;
		if(pt == 1) {
			BB.pawnLineBB[c].AND(BB.filesBB[Types.File_Of(sq)].newNOT());
		}
	}
	,HandExists: function(c,pr) {
		return this.hand[c][pr] > 0;
	}
	,AddHand: function(c,pr,n) {
		if(n == null) {
			n = 1;
		}
		this.hand[c][pr] += n;
	}
	,SubHand: function(c,pr,n) {
		if(n == null) {
			n = 1;
		}
		this.hand[c][pr] -= n;
	}
	,HandCount: function(c,pr) {
		return this.hand[c][pr];
	}
	,AttackersTo: function(s,occ) {
		var attBB = this.AttacksFromPawn(s,0).newAND(this.PiecesColourType(1,1));
		attBB.OR(this.AttacksFromPawn(s,1).newAND(this.PiecesColourType(0,1)));
		attBB.OR(this.AttacksFromPTypeSQ(s,19).newAND(this.PiecesColourType(0,3)));
		attBB.OR(this.AttacksFromPTypeSQ(s,3).newAND(this.PiecesColourType(1,3)));
		attBB.OR(this.AttacksFromPTypeSQ(s,18).newAND(this.PiecesColourType(0,2)));
		attBB.OR(this.AttacksFromPTypeSQ(s,2).newAND(this.PiecesColourType(1,2)));
		attBB.OR(this.AttacksFromPTypeSQ(s,20).newAND(this.PiecesColourType(0,4)));
		attBB.OR(this.AttacksFromPTypeSQ(s,4).newAND(this.PiecesColourType(1,4)));
		attBB.OR(this.AttacksFromPTypeSQ(s,23).newAND(this.PiecesColourType(0,7)));
		attBB.OR(this.AttacksFromPTypeSQ(s,7).newAND(this.PiecesColourType(1,7)));
		attBB.OR(this.AttacksFromPTypeSQ(s,25).newAND(this.PiecesColourType(0,9)));
		attBB.OR(this.AttacksFromPTypeSQ(s,9).newAND(this.PiecesColourType(1,9)));
		attBB.OR(this.AttacksFromPTypeSQ(s,26).newAND(this.PiecesColourType(0,10)));
		attBB.OR(this.AttacksFromPTypeSQ(s,10).newAND(this.PiecesColourType(1,10)));
		attBB.OR(this.AttacksFromPTypeSQ(s,27).newAND(this.PiecesColourType(0,11)));
		attBB.OR(this.AttacksFromPTypeSQ(s,11).newAND(this.PiecesColourType(1,11)));
		attBB.OR(this.AttacksFromPTypeSQ(s,28).newAND(this.PiecesColourType(0,12)));
		attBB.OR(this.AttacksFromPTypeSQ(s,12).newAND(this.PiecesColourType(1,12)));
		attBB.OR(BB.AttacksBB(s,occ,6).newAND(this.PiecesTypes(6,14)));
		attBB.OR(BB.AttacksBB(s,occ,5).newAND(this.PiecesTypes(5,13)));
		attBB.OR(this.AttacksFromPTypeSQ(s,8).newAND(this.PiecesTypes(14,13)));
		attBB.OR(this.AttacksFromPTypeSQ(s,8).newAND(this.PiecesType(8)));
		return attBB;
	}
	,MovedPieceAfter: function(m) {
		if(Types.Is_Drop(m)) {
			var this1 = m >>> 7 & 127;
			return this1;
		} else {
			return this.PieceOn(Types.Move_FromSq(m));
		}
	}
	,setPosition: function(sfen) {
		haxe_Log.trace("Position::setPosition start",{ fileName : "Position.hx", lineNumber : 276, className : "Position", methodName : "setPosition"});
		this.InitBB();
		this.Clear();
		var sf = new SFEN(sfen);
		this.sideToMove = sf.SideToMove();
		this.board = sf.getBoard();
		var _g = 0;
		while(_g < 81) {
			var i = _g++;
			var pc = this.PieceOn(i);
			var pt = Types.TypeOf_Piece(pc);
			var c = Types.getPieceColor(pc);
			if(pc == 0) {
				continue;
			}
			this.PutPiece(i,c,pt);
		}
		haxe_Log.trace("Position::setPosition " + sfen,{ fileName : "Position.hx", lineNumber : 291, className : "Position", methodName : "setPosition"});
		this.hand = sf.getHand();
		var moves = sf.getMoves();
		var _g1 = 0;
		var _g2 = moves.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			this.doMove(moves[i1]);
		}
		haxe_Log.trace(this.board,{ fileName : "Position.hx", lineNumber : 297, className : "Position", methodName : "setPosition"});
		var tmp = this.AttackersToSq(this.KingSquare(this.sideToMove));
		var tmp1 = this.PiecesColour(Types.OppColour(this.sideToMove));
		this.st.checkersBB = tmp.newAND(tmp1);
	}
	,SideToMove: function() {
		return this.sideToMove;
	}
	,AttacksFromPTypeSQ: function(sq,pc) {
		var pt = Types.TypeOf_Piece(pc);
		if(pt == 5 || pt == 6 || pt == 13 || pt == 14) {
			return BB.AttacksBB(sq,this.PiecesAll(),pt);
		} else if(pt == 2) {
			var rb = BB.AttacksBB(sq,this.PiecesAll(),6);
			var b = BB.getStepAttacksBB(pc,sq).newAND(rb);
			return b;
		} else {
			return BB.getStepAttacksBB(pc,sq);
		}
	}
	,Clear: function() {
		haxe_Log.trace("Position::Clear",{ fileName : "Position.hx", lineNumber : 319, className : "Position", methodName : "Clear"});
		var _g = 0;
		while(_g < 81) {
			var i = _g++;
			this.board[i] = 0;
			this.index[i] = 0;
		}
		this.byTypeBB[0].Clear();
		this.byTypeBB[1].Clear();
		this.byTypeBB[2].Clear();
		this.byTypeBB[3].Clear();
		this.byTypeBB[4].Clear();
		this.byTypeBB[5].Clear();
		this.byTypeBB[6].Clear();
		this.byTypeBB[7].Clear();
		this.byTypeBB[8].Clear();
		this.byTypeBB[9].Clear();
		this.byTypeBB[10].Clear();
		this.byTypeBB[11].Clear();
		this.byTypeBB[12].Clear();
		this.byTypeBB[13].Clear();
		this.byTypeBB[14].Clear();
		this.byColorBB[0].Clear();
		this.pieceCount[0] = [];
		var _g1 = 0;
		while(_g1 < 15) {
			var j = _g1++;
			this.pieceCount[0][j] = 0;
			this.pieceList[0][j][0] = 0;
			this.pieceList[0][j][1] = 0;
			this.pieceList[0][j][2] = 0;
			this.pieceList[0][j][3] = 0;
			this.pieceList[0][j][4] = 0;
			this.pieceList[0][j][5] = 0;
			this.pieceList[0][j][6] = 0;
			this.pieceList[0][j][7] = 0;
			this.pieceList[0][j][8] = 0;
			this.pieceList[0][j][9] = 0;
			this.pieceList[0][j][10] = 0;
			this.pieceList[0][j][11] = 0;
			this.pieceList[0][j][12] = 0;
			this.pieceList[0][j][13] = 0;
			this.pieceList[0][j][14] = 0;
			this.pieceList[0][j][15] = 0;
		}
		this.byColorBB[1].Clear();
		this.pieceCount[1] = [];
		var _g11 = 0;
		while(_g11 < 15) {
			var j1 = _g11++;
			this.pieceCount[1][j1] = 0;
			this.pieceList[1][j1][0] = 0;
			this.pieceList[1][j1][1] = 0;
			this.pieceList[1][j1][2] = 0;
			this.pieceList[1][j1][3] = 0;
			this.pieceList[1][j1][4] = 0;
			this.pieceList[1][j1][5] = 0;
			this.pieceList[1][j1][6] = 0;
			this.pieceList[1][j1][7] = 0;
			this.pieceList[1][j1][8] = 0;
			this.pieceList[1][j1][9] = 0;
			this.pieceList[1][j1][10] = 0;
			this.pieceList[1][j1][11] = 0;
			this.pieceList[1][j1][12] = 0;
			this.pieceList[1][j1][13] = 0;
			this.pieceList[1][j1][14] = 0;
			this.pieceList[1][j1][15] = 0;
		}
		var _g12 = 0;
		while(_g12 < 15) {
			var i1 = _g12++;
			var _g13 = 0;
			while(_g13 < 16) {
				var j2 = _g13++;
				this.pieceList[1][i1][j2] = 81;
				this.pieceList[0][i1][j2] = 81;
			}
		}
	}
	,printBoard: function() {
		var s = "";
		s += "\n";
		var f = 8;
		while(f >= 0) {
			var sq = Types.Square(f,0);
			s += HxOverrides.substr("  " + this.board[sq],-3,null);
			--f;
		}
		s += "\n";
		var f1 = 8;
		while(f1 >= 0) {
			var sq1 = Types.Square(f1,1);
			s += HxOverrides.substr("  " + this.board[sq1],-3,null);
			--f1;
		}
		s += "\n";
		var f2 = 8;
		while(f2 >= 0) {
			var sq2 = Types.Square(f2,2);
			s += HxOverrides.substr("  " + this.board[sq2],-3,null);
			--f2;
		}
		s += "\n";
		var f3 = 8;
		while(f3 >= 0) {
			var sq3 = Types.Square(f3,3);
			s += HxOverrides.substr("  " + this.board[sq3],-3,null);
			--f3;
		}
		s += "\n";
		var f4 = 8;
		while(f4 >= 0) {
			var sq4 = Types.Square(f4,4);
			s += HxOverrides.substr("  " + this.board[sq4],-3,null);
			--f4;
		}
		s += "\n";
		var f5 = 8;
		while(f5 >= 0) {
			var sq5 = Types.Square(f5,5);
			s += HxOverrides.substr("  " + this.board[sq5],-3,null);
			--f5;
		}
		s += "\n";
		var f6 = 8;
		while(f6 >= 0) {
			var sq6 = Types.Square(f6,6);
			s += HxOverrides.substr("  " + this.board[sq6],-3,null);
			--f6;
		}
		s += "\n";
		var f7 = 8;
		while(f7 >= 0) {
			var sq7 = Types.Square(f7,7);
			s += HxOverrides.substr("  " + this.board[sq7],-3,null);
			--f7;
		}
		s += "\n";
		var f8 = 8;
		while(f8 >= 0) {
			var sq8 = Types.Square(f8,8);
			s += HxOverrides.substr("  " + this.board[sq8],-3,null);
			--f8;
		}
		haxe_Log.trace(s,{ fileName : "Position.hx", lineNumber : 363, className : "Position", methodName : "printBoard"});
	}
};
var SFEN = function(sfen) {
	this.moves = [];
	this.hand = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]];
	this.sideToMove = 0;
	this.board = [];
	this.setPosition(sfen);
};
SFEN.__name__ = true;
SFEN.prototype = {
	getBoard: function() {
		var arr = [];
		var _g = 0;
		while(_g < 81) {
			var i = _g++;
			arr.push(this.board[i]);
		}
		return arr;
	}
	,getHand: function() {
		return this.hand;
	}
	,getMoves: function() {
		return this.moves;
	}
	,SideToMove: function() {
		return this.sideToMove;
	}
	,setPosition: function(sfen) {
		sfen = StringTools.replace(sfen,"startpos","lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1");
		sfen = StringTools.replace(sfen,"sfen ","");
		haxe_Log.trace("SFEN::setPosition",{ fileName : "SFEN.hx", lineNumber : 45, className : "SFEN", methodName : "setPosition", customParams : [sfen]});
		var tokens = sfen.split(" ");
		var f = 8;
		var r = 0;
		var promote = false;
		var i = 0;
		var token = "";
		var sq = 0;
		this.board = [];
		haxe_Log.trace(tokens,{ fileName : "SFEN.hx", lineNumber : 54, className : "SFEN", methodName : "setPosition"});
		var _g = 0;
		var _g1 = tokens[0].length;
		while(_g < _g1) {
			var i1 = _g++;
			var token1 = tokens[0].charAt(i1);
			if(util_StringUtil.isNumberString(token1)) {
				var _g2 = 0;
				var _g11 = Std.parseInt(token1);
				while(_g2 < _g11) {
					var n = _g2++;
					sq = f * 9 + r;
					this.board[sq] = 0;
					--f;
				}
			} else if(token1 == "+") {
				promote = true;
			} else if(token1 == "/") {
				f = 8;
				++r;
			} else {
				sq = f * 9 + r;
				var pc = Types.getPieceFromLabel(token1);
				if(promote) {
					var this1 = pc + 8;
					pc = this1;
				}
				this.board[sq] = pc;
				--f;
				promote = false;
			}
		}
		this.sideToMove = tokens[1] == "b" ? 0 : 1;
		var ct = 0;
		var _g21 = 0;
		var _g3 = tokens[2].length;
		while(_g21 < _g3) {
			var i2 = _g21++;
			var token2 = tokens[2].charAt(i2);
			if(token2 == "-") {
				break;
			} else if(util_StringUtil.isNumberString(token2)) {
				ct = Std.parseInt(token2) + ct * 10;
			} else {
				ct = util_MathUtil.max(ct,1);
				var pc1 = Types.getPieceFromLabel(token2);
				this.hand[Types.getPieceColor(pc1)][Types.RawTypeOf(pc1)] = ct;
				ct = 0;
			}
		}
		if(sfen.indexOf("moves") > 0) {
			var mvs = sfen.split("moves ")[1].split(" ");
			var _g4 = 0;
			var _g5 = mvs.length;
			while(_g4 < _g5) {
				var i3 = _g4++;
				var m = Types.generateMoveFromString(mvs[i3]);
				this.moves.push(m);
			}
		}
	}
};
var StateInfo = function() {
	this.capturedType = 0;
	this.checkersBB = new Bitboard();
	haxe_Log.trace("new StateInfo",{ fileName : "StateInfo.hx", lineNumber : 10, className : "StateInfo", methodName : "new"});
};
StateInfo.__name__ = true;
StateInfo.prototype = {
	Clear: function() {
		this.checkersBB.Clear();
		var this1 = 0;
		this.capturedType = this1;
	}
	,Copy: function(other) {
		this.checkersBB.Copy(other.checkersBB);
		this.capturedType = other.capturedType;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var _$Types_Move_$Impl_$ = {};
_$Types_Move_$Impl_$.__name__ = true;
_$Types_Move_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var _$Types_PR_$Impl_$ = {};
_$Types_PR_$Impl_$.__name__ = true;
_$Types_PR_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var _$Types_PT_$Impl_$ = {};
_$Types_PT_$Impl_$.__name__ = true;
_$Types_PT_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var _$Types_PC_$Impl_$ = {};
_$Types_PC_$Impl_$.__name__ = true;
_$Types_PC_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var Types = function() { };
Types.__name__ = true;
Types.hasLongEffect = function(pt) {
	switch(pt) {
	case 5:
		return true;
	case 6:
		return true;
	case 13:
		return true;
	case 14:
		return true;
	default:
		return false;
	}
};
Types.OppColour = function(c) {
	return c ^ 1;
};
Types.Is_SqOK = function(s) {
	if(s >= 0) {
		return s <= 80;
	} else {
		return false;
	}
};
Types.File_Of = function(s) {
	return s / 9 | 0;
};
Types.Rank_Of = function(s) {
	return s % 9;
};
Types.FileString_Of = function(s) {
	return "" + (Types.File_Of(s) + 1);
};
Types.File_To_Char = function(f) {
	return "" + (f + 1);
};
Types.Rank_To_Char = function(r,toLower) {
	if(toLower == null) {
		toLower = true;
	}
	if(toLower) {
		var code = HxOverrides.cca("a",0) + r;
		return String.fromCodePoint(code);
	} else {
		var code1 = HxOverrides.cca("A",0) + r;
		return String.fromCodePoint(code1);
	}
};
Types.Square_To_String = function(s) {
	return Types.File_To_Char(Types.File_Of(s)) + Types.Rank_To_Char(Types.Rank_Of(s));
};
Types.Char_To_File = function(n) {
	return Std.parseInt(n) - 1;
};
Types.Char_To_Rank = function(a) {
	return HxOverrides.cca(a,0) - 97;
};
Types.Move_FromSq = function(m) {
	return m >>> 7 & 127;
};
Types.Move_ToSq = function(m) {
	return m & 127;
};
Types.Move_Dropped_Piece = function(m) {
	var this1 = m >>> 7 & 127;
	return this1;
};
Types.Move_Type = function(m) {
	return m & 49152;
};
Types.Move_To_String = function(m) {
	if(Types.Is_Drop(m)) {
		var this1 = Types.Move_Dropped_Piece(m);
		var pc = Types.PieceToChar(this1);
		var str = Types.Square_To_String(Types.Move_ToSq(m));
		return "" + pc + "*" + str;
	} else if(Types.Is_Promote(m)) {
		return Types.Square_To_String(Types.Move_FromSq(m)) + Types.Square_To_String(Types.Move_ToSq(m)) + "+";
	} else {
		return Types.Square_To_String(Types.Move_FromSq(m)) + Types.Square_To_String(Types.Move_ToSq(m));
	}
};
Types.Move_To_StringLong = function(m) {
	return Types.Move_To_String(m) + " " + Types.Move_Type_String(m) + " : " + m;
};
Types.Move_Type_String = function(m) {
	if(Types.Move_Type(m) == 16384) {
		return "Drop";
	}
	if(Types.Move_Type(m) == 32768) {
		return "Promo";
	}
	return "Normal";
};
Types.Make_Move = function(from,to) {
	var this1 = to | from << 7;
	return this1;
};
Types.Make_Move_Promote = function(from,to) {
	var this1 = to | from << 7 | 32768;
	return this1;
};
Types.Make_Move_Drop = function(pr,sq) {
	var this1 = sq | pr << 7 | 16384;
	return this1;
};
Types.generateMoveFromString = function(ft) {
	var f = Types.Char_To_File(ft.charAt(0));
	var r = Types.Char_To_Rank(ft.charAt(1));
	var from = Types.Square(f,r);
	f = Types.Char_To_File(ft.charAt(2));
	r = Types.Char_To_Rank(ft.charAt(3));
	var to = Types.Square(f,r);
	if(ft.indexOf("*") > 0) {
		var pr = Types.RawTypeOf(Types.getPieceFromLabel(ft.charAt(0)));
		f = Types.Char_To_File(ft.charAt(2));
		r = Types.Char_To_Rank(ft.charAt(3));
		to = Types.Square(f,r);
		return Types.Make_Move_Drop(pr,to);
	} else if(ft.indexOf("+") > 0) {
		return Types.Make_Move_Promote(from,to);
	} else {
		return Types.Make_Move(from,to);
	}
};
Types.Is_Move_OK = function(m) {
	return Types.Move_FromSq(m) != Types.Move_ToSq(m);
};
Types.Is_Promote = function(m) {
	return (m & 32768) != 0;
};
Types.Is_Drop = function(m) {
	return (m & 16384) != 0;
};
Types.RankString_Of = function(s) {
	var code = 97 + Types.Rank_Of(s);
	return String.fromCodePoint(code);
};
Types.RawTypeOf = function(p) {
	var this1 = p % 8;
	return this1;
};
Types.Make_Piece = function(c,pt) {
	var this1 = c << 4 | pt;
	return this1;
};
Types.Square = function(f,r) {
	return f * 9 + r;
};
Types.getPieceColor = function(pc) {
	if(pc == 0) {
		return -1;
	}
	if((pc | 0) < 16) {
		return 0;
	} else {
		return 1;
	}
};
Types.TypeOf_Piece = function(pc) {
	var this1 = pc % 16;
	return this1;
};
Types.PieceToChar = function(pc) {
	if(pc == 1) {
		return "P";
	}
	if(pc == 2) {
		return "L";
	}
	if(pc == 4) {
		return "S";
	}
	if(pc == 3) {
		return "N";
	}
	if(pc == 5) {
		return "B";
	}
	if(pc == 6) {
		return "R";
	}
	if(pc == 7) {
		return "G";
	}
	if(pc == 8) {
		return "K";
	}
	if(pc == 9) {
		return "+P";
	}
	if(pc == 10) {
		return "+L";
	}
	if(pc == 11) {
		return "+N";
	}
	if(pc == 12) {
		return "+S";
	}
	if(pc == 13) {
		return "+B";
	}
	if(pc == 14) {
		return "+R";
	}
	if(pc == 17) {
		return "p";
	}
	if(pc == 18) {
		return "l";
	}
	if(pc == 19) {
		return "n";
	}
	if(pc == 20) {
		return "s";
	}
	if(pc == 21) {
		return "b";
	}
	if(pc == 22) {
		return "r";
	}
	if(pc == 23) {
		return "g";
	}
	if(pc == 24) {
		return "k";
	}
	if(pc == 25) {
		return "+p";
	}
	if(pc == 26) {
		return "+l";
	}
	if(pc == 27) {
		return "+n";
	}
	if(pc == 28) {
		return "+s";
	}
	if(pc == 29) {
		return "+b";
	}
	if(pc == 30) {
		return "+r";
	}
	return "?";
};
Types.getPieceFromLabel = function(token) {
	switch(token) {
	case "B":
		return 5;
	case "G":
		return 7;
	case "K":
		return 8;
	case "L":
		return 2;
	case "N":
		return 3;
	case "P":
		return 1;
	case "R":
		return 6;
	case "S":
		return 4;
	case "b":
		return 21;
	case "g":
		return 23;
	case "k":
		return 24;
	case "l":
		return 18;
	case "n":
		return 19;
	case "p":
		return 17;
	case "r":
		return 22;
	case "s":
		return 20;
	default:
		return 0;
	}
};
Types.getPieceLabel = function(pt) {
	switch((pt | 0) % 16) {
	case 0:
		return "　";
	case 1:
		return "歩";
	case 2:
		return "香";
	case 3:
		return "桂";
	case 4:
		return "銀";
	case 5:
		return "角";
	case 6:
		return "飛";
	case 7:
		return "金";
	case 8:
		return "玉";
	case 9:
		return "と";
	case 10:
		return "杏";
	case 11:
		return "圭";
	case 12:
		return "全";
	case 13:
		return "馬";
	case 14:
		return "龍";
	default:
		return "　";
	}
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var ui_Game = function(ui_) {
	this.moves = [];
	this._sfen = "sfen lnsg1gsnl/1r311b1/ppppppp1k/9/9/9/PPPPPPP1P/1B5R1/LNSGKGSN1 w plL 1";
	this.playerColor = 0;
	haxe_Log.trace("Game::new",{ fileName : "ui/Game.hx", lineNumber : 22, className : "ui.Game", methodName : "new"});
	Position.call(this);
	this.ui = ui_;
	this.createWorker();
	BB.Init();
};
ui_Game.__name__ = true;
ui_Game.__super__ = Position;
ui_Game.prototype = $extend(Position.prototype,{
	createWorker: function() {
		haxe_Log.trace("Game::createWorker",{ fileName : "ui/Game.hx", lineNumber : 30, className : "ui.Game", methodName : "createWorker"});
		this.worker = new Worker("Engine.js");
		this.worker.onmessage = $bind(this,this.onMessage);
	}
	,doPlayerMove: function(from,to,promote) {
		if(promote) {
			this.doMove(Types.Make_Move_Promote(from,to));
		} else {
			this.doMove(Types.Make_Move(from,to));
		}
	}
	,doPlayerPut: function(pr,to) {
		haxe_Log.trace("Game::doPlayerPut pr: " + pr + " to: " + to,{ fileName : "ui/Game.hx", lineNumber : 44, className : "ui.Game", methodName : "doPlayerPut"});
		var move = Types.Make_Move_Drop(pr,to);
		this.doMove(move);
	}
	,doMove: function(move) {
		haxe_Log.trace("Game::doMove " + Types.Move_To_String(move),{ fileName : "ui/Game.hx", lineNumber : 50, className : "ui.Game", methodName : "doMove"});
		this.moves.push(move);
		Position.prototype.doMove.call(this,move);
		this.printBoard();
		haxe_Log.trace("hand " + Std.string(this.hand),{ fileName : "ui/Game.hx", lineNumber : 54, className : "ui.Game", methodName : "doMove"});
		if(this.isEnemyTurn()) {
			this.startThink();
		}
	}
	,startThink: function() {
		if(this.moves.length == 0) {
			this.worker.postMessage("position " + this._sfen);
		} else {
			this.worker.postMessage("position " + this._sfen + " moves " + this.getMovesString());
		}
	}
	,getMovesString: function() {
		var s = Types.Move_To_String(this.moves[0]);
		var _g = 1;
		var _g1 = this.moves.length;
		while(_g < _g1) {
			var i = _g++;
			s += " " + Types.Move_To_String(this.moves[i]);
		}
		return s;
	}
	,getMovableSq: function(sq,pc) {
		var arr = [];
		var us = this.sideToMove;
		var attack = this.AttacksFromPTypeSQ(sq,pc);
		var target = this.byColorBB[us].newNOT();
		var b = attack.newAND(target);
		while(b.IsNonZero()) arr.push(b.PopLSB());
		return arr;
	}
	,getEmptySq: function() {
		var b = this.PiecesAll().newNOT().NORM27();
		haxe_Log.trace(b.toStringBB(),{ fileName : "ui/Game.hx", lineNumber : 90, className : "ui.Game", methodName : "getEmptySq"});
		var arr = [];
		while(b.IsNonZero()) arr.push(b.PopLSB());
		return arr;
	}
	,isEnemyTurn: function() {
		return this.sideToMove != this.playerColor;
	}
	,onMessage: function(s) {
		haxe_Log.trace("Game::onThink " + Std.string(s.data),{ fileName : "ui/Game.hx", lineNumber : 103, className : "ui.Game", methodName : "onMessage"});
		var tokens = s.data.split(" ");
		var move = Types.generateMoveFromString(tokens[1]);
		if(move == 0) {
			this.endGame();
		} else {
			this.doMove(move);
			this.ui.onEnemyMoved();
		}
	}
	,start: function() {
		haxe_Log.trace("Game::start",{ fileName : "ui/Game.hx", lineNumber : 115, className : "ui.Game", methodName : "start"});
		this.setPosition(this._sfen);
	}
	,endGame: function() {
		haxe_Log.trace("Game::End",{ fileName : "ui/Game.hx", lineNumber : 120, className : "ui.Game", methodName : "endGame"});
		this.ui.onEndGame(this.sideToMove);
	}
	,setPosition: function(sfen) {
		Position.prototype.setPosition.call(this,sfen);
		if(this.isEnemyTurn()) {
			this.ui.updateUi(3);
			this.startThink();
		} else {
			this.ui.updateUi(0);
		}
	}
});
var ui_UI = function() {
	this.selectedHand = 0;
	this.toSq = 0;
	this.selectedSq = 0;
	this.operationMode = 0;
	window.onload = $bind(this,this.onLoad);
	this.game = new ui_Game(this);
};
ui_UI.__name__ = true;
ui_UI.prototype = {
	onLoad: function() {
		this.Init();
		this.game.start();
	}
	,Init: function() {
		this.hideDialog();
	}
	,showDialog: function() {
		window.document.getElementById("dialog_promote").style.display = "block";
		window.document.getElementById("dialog_bg").style.display = "block";
	}
	,hideDialog: function() {
		window.document.getElementById("dialog_promote").style.display = "none";
		window.document.getElementById("dialog_bg").style.display = "none";
	}
	,onClickPromote: function(promote) {
		haxe_Log.trace("onClickPromote " + (promote == null ? "null" : "" + promote),{ fileName : "ui/UI.hx", lineNumber : 41, className : "ui.UI", methodName : "onClickPromote"});
		this.hideDialog();
		this.game.doPlayerMove(this.selectedSq,this.toSq,promote);
		this.updateUi(3);
	}
	,isPromotable: function(sq,pc) {
		haxe_Log.trace("isPromotable sq:" + sq + " pc:" + pc,{ fileName : "ui/UI.hx", lineNumber : 48, className : "ui.UI", methodName : "isPromotable"});
		if(pc % 16 > 8) {
			return false;
		} else if(Types.Rank_Of(sq) < 3) {
			return true;
		} else if(Types.Rank_Of(this.selectedSq) <= 3) {
			return true;
		} else {
			return false;
		}
	}
	,onClickCell: function(sq) {
		haxe_Log.trace("on clickCell:",{ fileName : "ui/UI.hx", lineNumber : 61, className : "ui.UI", methodName : "onClickCell", customParams : [sq]});
		switch(this.operationMode) {
		case 0:
			this.selectedSq = sq;
			this.updateUi(1);
			break;
		case 1:
			this.toSq = sq;
			var from_pc = this.game.PieceOn(this.selectedSq);
			if(this.isPromotable(this.toSq,from_pc)) {
				this.showDialog();
			} else {
				this.game.doPlayerMove(this.selectedSq,this.toSq,false);
				this.updateUi(3);
			}
			break;
		case 2:
			this.game.doPlayerPut(this.selectedHand,sq);
			this.updateUi(3);
			break;
		default:
		}
	}
	,onClickHand: function(pr) {
		haxe_Log.trace("on clickHand:",{ fileName : "ui/UI.hx", lineNumber : 83, className : "ui.UI", methodName : "onClickHand", customParams : [pr]});
		if(this.operationMode == 0) {
			this.selectedHand = pr;
			this.updateUi(2);
		}
	}
	,onEnemyMoved: function() {
		haxe_Log.trace("UI::onEnemyMoved",{ fileName : "ui/UI.hx", lineNumber : 93, className : "ui.UI", methodName : "onEnemyMoved"});
		this.updateUi(0);
	}
	,onEndGame: function(winner) {
		js_Browser.alert("" + winner + "の勝ちです");
	}
	,isPlayerPiece: function(sq,pc) {
		var c = Types.getPieceColor(pc);
		if(this.game.sideToMove == c) {
			return (pc | 0) > 0;
		} else {
			return false;
		}
	}
	,updateUi: function(mode) {
		var linkable = false;
		var this1 = 0;
		var pc = this1;
		this.operationMode = mode;
		switch(this.operationMode) {
		case 0:
			var _g = 0;
			while(_g < 81) {
				var sq = _g++;
				pc = this.game.PieceOn(sq);
				if(this.isPlayerPiece(sq,pc)) {
					var arr = this.game.getMovableSq(sq,pc);
					if(arr.length > 0) {
						linkable = true;
					} else {
						linkable = false;
					}
				} else {
					linkable = false;
				}
				this.setCell(sq,this.game.PieceOn(sq),linkable);
			}
			var _g1 = 1;
			while(_g1 < 8) {
				var i = _g1++;
				this.setHand(0,i,this.game.hand[0][i],this.game.hand[0][i] > 0);
				this.setHand(1,i,this.game.hand[1][i],false);
			}
			break;
		case 1:
			pc = this.game.PieceOn(this.selectedSq);
			var arr1 = this.game.getMovableSq(this.selectedSq,pc);
			var _g2 = 0;
			while(_g2 < 81) {
				var sq1 = _g2++;
				linkable = arr1.indexOf(sq1) > -1;
				this.setCell(sq1,this.game.PieceOn(sq1),linkable);
			}
			this.setHand(0,1,this.game.hand[0][1],false);
			this.setHand(1,1,this.game.hand[1][1],false);
			this.setHand(0,2,this.game.hand[0][2],false);
			this.setHand(1,2,this.game.hand[1][2],false);
			this.setHand(0,3,this.game.hand[0][3],false);
			this.setHand(1,3,this.game.hand[1][3],false);
			this.setHand(0,4,this.game.hand[0][4],false);
			this.setHand(1,4,this.game.hand[1][4],false);
			this.setHand(0,5,this.game.hand[0][5],false);
			this.setHand(1,5,this.game.hand[1][5],false);
			this.setHand(0,6,this.game.hand[0][6],false);
			this.setHand(1,6,this.game.hand[1][6],false);
			this.setHand(0,7,this.game.hand[0][7],false);
			this.setHand(1,7,this.game.hand[1][7],false);
			break;
		case 2:
			var arr2 = this.game.getEmptySq();
			var _g3 = 0;
			while(_g3 < 81) {
				var sq2 = _g3++;
				linkable = arr2.indexOf(sq2) > -1;
				this.setCell(sq2,this.game.PieceOn(sq2),linkable);
			}
			this.setHand(0,1,this.game.hand[0][1],false);
			this.setHand(1,1,this.game.hand[1][1],false);
			this.setHand(0,2,this.game.hand[0][2],false);
			this.setHand(1,2,this.game.hand[1][2],false);
			this.setHand(0,3,this.game.hand[0][3],false);
			this.setHand(1,3,this.game.hand[1][3],false);
			this.setHand(0,4,this.game.hand[0][4],false);
			this.setHand(1,4,this.game.hand[1][4],false);
			this.setHand(0,5,this.game.hand[0][5],false);
			this.setHand(1,5,this.game.hand[1][5],false);
			this.setHand(0,6,this.game.hand[0][6],false);
			this.setHand(1,6,this.game.hand[1][6],false);
			this.setHand(0,7,this.game.hand[0][7],false);
			this.setHand(1,7,this.game.hand[1][7],false);
			break;
		default:
			var _g4 = 0;
			while(_g4 < 81) {
				var sq3 = _g4++;
				this.setCell(sq3,this.game.PieceOn(sq3),false);
			}
			this.setHand(0,1,this.game.hand[0][1],false);
			this.setHand(1,1,this.game.hand[1][1],false);
			this.setHand(0,2,this.game.hand[0][2],false);
			this.setHand(1,2,this.game.hand[1][2],false);
			this.setHand(0,3,this.game.hand[0][3],false);
			this.setHand(1,3,this.game.hand[1][3],false);
			this.setHand(0,4,this.game.hand[0][4],false);
			this.setHand(1,4,this.game.hand[1][4],false);
			this.setHand(0,5,this.game.hand[0][5],false);
			this.setHand(1,5,this.game.hand[1][5],false);
			this.setHand(0,6,this.game.hand[0][6],false);
			this.setHand(1,6,this.game.hand[1][6],false);
			this.setHand(0,7,this.game.hand[0][7],false);
			this.setHand(1,7,this.game.hand[1][7],false);
		}
	}
	,setCell: function(sq,pc,linkable) {
		var c = Types.getPieceColor(pc);
		var s = "" + Types.getPieceLabel(Types.TypeOf_Piece(pc));
		if(linkable) {
			s = "<a href=\"javascript:Main.onClickCell(" + sq + ")\">" + s + "</a>";
		}
		var cell = window.document.getElementById("cell_" + sq);
		if(this.game.playerColor == c) {
			cell.style.transform = "";
		} else {
			cell.style.transform = "rotate(180deg)";
		}
		cell.innerHTML = s;
	}
	,setHand: function(c,i,n,linkable) {
		var cell = window.document.getElementById("hand_" + c + "_" + i);
		var s = "　";
		if(n > 0) {
			var this1 = i;
			s = "" + Types.getPieceLabel(this1) + n;
		}
		if(linkable) {
			s = "<a href=\"javascript:Main.onClickHand(" + i + ")\">" + s + "</a>";
		}
		if(this.game.playerColor == c) {
			cell.style.transform = "";
		} else {
			cell.style.transform = "rotate(180deg)";
		}
		cell.innerHTML = s;
	}
};
var util_MathUtil = function() { };
util_MathUtil.__name__ = true;
util_MathUtil.abs = function(a) {
	if(a >= 0) {
		return a;
	} else {
		return -a;
	}
};
util_MathUtil.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
util_MathUtil.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
var util_StringUtil = function() { };
util_StringUtil.__name__ = true;
util_StringUtil.isNumberString = function(s) {
	var r = new EReg("[0-9]+","");
	return r.match(s);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
BB.squareDistance = [];
BB.stepAttacksBB = [];
BB.betweenBB = [];
BB.lineBB = [];
BB.squareBB = [];
BB.enemyField1 = [];
BB.enemyField2 = [];
BB.enemyField3 = [];
BB.pawnLineBB = [];
BB.pseudoAttacks = [];
BB.pseudoQueenAttacks = [];
BB.initialized = false;
BB.steps = [[0,0,0,0,0,0,0,0,0],[-1,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,-8,0],[7,-11,0,0,0,0,0,0,0],[-1,8,10,-10,-8,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[-1,8,9,1,-10,-9,0,0,0],[-1,8,9,1,-10,-9,10,-8,0],[-1,8,9,1,-10,-9,0,0,0],[-1,8,9,1,-10,-9,0,0,0],[-1,8,9,1,-10,-9,0,0,0],[-1,8,9,1,-10,-9,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]];
BB.rDeltas = [-1,-9,1,9];
BB.bDeltas = [-10,-8,10,8];
Bitboard.NA = 27;
Bitboard.NB = 54;
SFEN.startpos = "lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1";
Types.BLACK = 0;
Types.WHITE = 1;
Types.FILE_A = 0;
Types.RANK_1 = 0;
Types.COLOR_NB = 2;
Types.ALL_PIECES = 0;
Types.PIECE_TYPE_NB = 15;
Types.PIECE_PROMOTE = 8;
Types.NO_PIECE_TYPE = 0;
Types.PAWN = 1;
Types.LANCE = 2;
Types.KNIGHT = 3;
Types.SILVER = 4;
Types.BISHOP = 5;
Types.ROOK = 6;
Types.GOLD = 7;
Types.KING = 8;
Types.PRO_PAWN = 9;
Types.PRO_LANCE = 10;
Types.PRO_KNIGHT = 11;
Types.PRO_SILVER = 12;
Types.HORSE = 13;
Types.DRAGON = 14;
Types.NO_PIECE = 0;
Types.B_PAWN = 1;
Types.B_LANCE = 2;
Types.B_KNIGHT = 3;
Types.B_SILVER = 4;
Types.B_BISHOP = 5;
Types.B_ROOK = 6;
Types.B_GOLD = 7;
Types.B_KING = 8;
Types.B_PRO_PAWN = 9;
Types.B_PRO_LANCE = 10;
Types.B_PRO_KNIGHT = 11;
Types.B_PRO_SILVER = 12;
Types.B_HORSE = 13;
Types.B_DRAGON = 14;
Types.W_PAWN = 17;
Types.W_LANCE = 18;
Types.W_KNIGHT = 19;
Types.W_SILVER = 20;
Types.W_BISHOP = 21;
Types.W_ROOK = 22;
Types.W_GOLD = 23;
Types.W_KING = 24;
Types.W_PRO_PAWN = 25;
Types.W_PRO_LANCE = 26;
Types.W_PRO_KNIGHT = 27;
Types.W_PRO_SILVER = 28;
Types.W_HORSE = 29;
Types.W_DRAGON = 30;
Types.PIECE_NB = 31;
Types.SQ_A1 = 0;
Types.SQ_HB = 80;
Types.SQ_NB = 81;
Types.SQ_NONE = 81;
Types.FILE_NB = 9;
Types.RANK_NB = 9;
Types.MAX_MOVES = 600;
Types.MAX_PLY = 1;
Types.DELTA_N = -1;
Types.DELTA_E = -9;
Types.DELTA_S = 1;
Types.DELTA_W = 9;
Types.DELTA_NN = -2;
Types.DELTA_NE = -10;
Types.DELTA_SE = -8;
Types.DELTA_SS = 2;
Types.DELTA_SW = 10;
Types.DELTA_NW = 8;
Types.MOVE_NONE = 0;
Types.MOVE_NORMAL = 0;
Types.MOVE_DROP = 16384;
Types.MOVE_PROMO = 32768;
Types.VALUE_ZERO = 0;
Types.VALUE_DRAW = 0;
Types.VALUE_KNOWN_WIN = 15000;
Types.VALUE_MATE = 30000;
Types.VALUE_INFINITE = 30001;
Types.VALUE_NONE = 30002;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
