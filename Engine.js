// Generated by Haxe 4.0.0-rc.2+77068e1
(function () { "use strict";
var Engine = function() {
	console.log("Engine.hx:11:","Engine:new");
};
Engine.main = function() {
	console.log("Engine.hx:15:","Engine main");
	Engine.global.onmessage = Engine.onMessage;
};
Engine.onMessage = function(m) {
	var msg = m.data;
	console.log("Engine.hx:21:","Endine get data = " + msg);
	if(msg.indexOf("position ") == 0) {
		var mvs = msg.split("moves ")[1];
		console.log("Engine.hx:24:",mvs);
		var m1 = data_Move.generateMoveFromString(mvs);
		console.log("Engine.hx:26:",m1.toString());
		Engine.global.postMessage(msg + "!!");
	}
};
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var Types = function() { };
Types.Is_SqOK = function(s) {
	if(s >= 0) {
		return s <= 80;
	} else {
		return false;
	}
};
Types.File_Of = function(s) {
	return s / 9 | 0;
};
Types.Rank_Of = function(s) {
	return s % 9;
};
Types.FileString_Of = function(s) {
	return "" + (Types.File_Of(s) + 1);
};
Types.RankString_Of = function(s) {
	var code = 97 + Types.Rank_Of(s);
	return String.fromCodePoint(code);
};
Types.RawTypeOf = function(p) {
	return p % 8;
};
Types.Make_Piece = function(c,pt) {
	return c << 4 | pt;
};
Types.Square = function(f,r) {
	return f * 9 + r;
};
Types.getPieceColor = function(pt) {
	if(pt == 0) {
		return -1;
	}
	if(pt < 16) {
		return 0;
	} else {
		return 1;
	}
};
Types.getPieceType = function(token) {
	switch(token) {
	case "B":
		return 5;
	case "G":
		return 7;
	case "K":
		return 8;
	case "L":
		return 2;
	case "N":
		return 3;
	case "P":
		return 1;
	case "R":
		return 6;
	case "S":
		return 4;
	case "b":
		return 21;
	case "g":
		return 23;
	case "k":
		return 24;
	case "l":
		return 18;
	case "n":
		return 19;
	case "p":
		return 17;
	case "r":
		return 22;
	case "s":
		return 20;
	default:
		return 0;
	}
};
Types.getPieceLabel = function(pt) {
	switch(pt % 16) {
	case 0:
		return "　";
	case 1:
		return "歩";
	case 2:
		return "香";
	case 3:
		return "桂";
	case 4:
		return "銀";
	case 5:
		return "角";
	case 6:
		return "飛";
	case 7:
		return "金";
	case 8:
		return "玉";
	case 9:
		return "と";
	case 10:
		return "と";
	case 11:
		return "杏";
	case 12:
		return "圭";
	case 13:
		return "全";
	case 14:
		return "馬";
	case 15:
		return "龍";
	default:
		return "　";
	}
};
var data_Move = function() {
	this.to = 0;
	this.from = 0;
};
data_Move.generateMove = function(from,to) {
	var m = new data_Move();
	m.from = from;
	m.to = to;
	return m;
};
data_Move.generateMoveFromString = function(ft) {
	console.log("data/Move.hx:16:","gene s: " + ft);
	var m = new data_Move();
	var f = Std.parseInt(HxOverrides.substr(ft,0,1)) - 1;
	var r = HxOverrides.cca(ft,1) - 97;
	m.from = Types.Square(f,r);
	console.log("data/Move.hx:21:","gene1 f: " + f + ", r: " + r + " from: " + m.from);
	f = Std.parseInt(HxOverrides.substr(ft,2,1)) - 1;
	r = HxOverrides.cca(ft,3) - 97;
	m.to = Types.Square(f,r);
	console.log("data/Move.hx:25:","gene2 f: " + f + ", r: " + r + " to: " + m.to);
	return m;
};
data_Move.prototype = {
	toString: function() {
		return "" + Types.FileString_Of(this.from) + Types.RankString_Of(this.from) + Types.FileString_Of(this.to) + Types.RankString_Of(this.to);
	}
};
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Engine.global = eval("self");
Types.BLACK = 0;
Types.WHITE = 1;
Types.NO_PIECE_TYPE = 0;
Types.PAWN = 1;
Types.LANCE = 2;
Types.KNIGHT = 3;
Types.SILVER = 4;
Types.BISHOP = 5;
Types.ROOK = 6;
Types.GOLD = 7;
Types.KING = 8;
Types.PRO_PAWN = 9;
Types.PRO_LANCE = 10;
Types.PRO_KNIGHT = 11;
Types.PRO_SILVER = 12;
Types.HORSE = 13;
Types.DRAGON = 14;
Types.NO_PIECE = 0;
Types.W_PAWN = 1;
Types.W_LANCE = 2;
Types.W_KNIGHT = 3;
Types.W_SILVER = 4;
Types.W_BISHOP = 5;
Types.W_ROOK = 6;
Types.W_GOLD = 7;
Types.W_KING = 8;
Types.W_PRO_PAWN = 9;
Types.W_PRO_LANCE = 10;
Types.W_PRO_KNIGHT = 11;
Types.W_PRO_SILVER = 12;
Types.W_HORSE = 13;
Types.W_DRAGON = 14;
Types.PIECE_WHITE = 16;
Types.B_PAWN = 17;
Types.B_LANCE = 18;
Types.B_KNIGHT = 19;
Types.B_SILVER = 20;
Types.B_BISHOP = 21;
Types.B_ROOK = 22;
Types.B_GOLD = 23;
Types.B_KING = 24;
Types.B_PRO_PAWN = 25;
Types.B_PRO_LANCE = 26;
Types.B_PRO_KNIGHT = 27;
Types.B_PRO_SILVER = 28;
Types.B_HORSE = 29;
Types.B_DRAGON = 30;
Types.PIECE_NB = 31;
Types.SQ_A1 = 0;
Types.SQ_HB = 80;
Types.SQ_NB = 81;
Types.FILE_NB = 9;
Types.RANK_NB = 9;
Engine.main();
})();
